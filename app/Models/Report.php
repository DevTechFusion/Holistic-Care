<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Report extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'appointment_id',
        'report_type',
        'summary_data',
        'notes',
        'generated_by_id',
        'generated_at',
        'amount',
        'payment_method',
        'remarks_1_id',
        'remarks_2_id',
        'status_id',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'summary_data' => 'array',
        'generated_at' => 'datetime',
        'amount' => 'decimal:2',
    ];

    /**
     * Get the appointment that this report belongs to.
     */
    public function appointment()
    {
        return $this->belongsTo(Appointment::class);
    }

    /**
     * Get the remarks1 for this report.
     */
    public function remarks1()
    {
        return $this->belongsTo(Remarks1::class, 'remarks_1_id');
    }

    /**
     * Get the remarks2 for this report.
     */
    public function remarks2()
    {
        return $this->belongsTo(Remarks2::class, 'remarks_2_id');
    }

    /**
     * Get the status for this report.
     */
    public function status()
    {
        return $this->belongsTo(Status::class, 'status_id');
    }

    /**
     * Get the user who generated this report.
     */
    public function generatedBy()
    {
        return $this->belongsTo(User::class, 'generated_by_id');
    }

    /**
     * Scope to get reports by type.
     */
    public function scopeByType($query, $type)
    {
        return $query->where('report_type', $type);
    }

    /**
     * Scope to get reports generated by specific user.
     */
    public function scopeByGeneratedBy($query, $user)
    {
        return $query->where('generated_by_id', $user);
    }

    /**
     * Scope to get reports generated within date range.
     */
    public function scopeByDateRange($query, $startDate, $endDate)
    {
        return $query->whereBetween('generated_at', [$startDate, $endDate]);
    }

    /**
     * Scope to get reports by status.
     */
    public function scopeByStatus($query, $statusId)
    {
        return $query->where('status_id', $statusId);
    }

    /**
     * Scope to get reports by remarks1.
     */
    public function scopeByRemarks1($query, $remarks1Id)
    {
        return $query->where('remarks_1_id', $remarks1Id);
    }

    /**
     * Scope to get reports by remarks2.
     */
    public function scopeByRemarks2($query, $remarks2Id)
    {
        return $query->where('remarks_2_id', $remarks2Id);
    }

    /**
     * Scope to get reports by amount range.
     */
    public function scopeByAmountRange($query, $minAmount, $maxAmount)
    {
        return $query->whereBetween('amount', [$minAmount, $maxAmount]);
    }

    /**
     * Scope to get reports by payment method.
     */
    public function scopeByPaymentMethod($query, $paymentMethod)
    {
        return $query->where('payment_method', 'like', '%' . $paymentMethod . '%');
    }

    /**
     * Get the appointment data with all relationships.
     */
    public function getAppointmentWithRelations()
    {
        return $this->appointment()->with([
            'doctor', 'procedure', 'category', 'department', 'source', 'remarks1', 'remarks2', 'status'
        ])->first();
    }
}
